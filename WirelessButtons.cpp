 /***************************************************************
Copyright(c) 2013  AITON. All rights reserved.
Author:     AITON
FileName:   LampBoard.cpp
Date:       2013-4-13
Description:‰ø°Âè∑Êú∫ÁÅØÊâãÊéßÊìç‰ΩúÂ§ÑÁêÜÁ±ªÊñá‰ª∂.ÂåÖÂê´ÂØπÊâãÊéßÈù¢ÊùøÂÖ®Á∫¢ÔºåÈªÑÈó™ÔºåÊ≠•Ëøõ,ÊâãÂä®Ëá™Âä®ÂàáÊç¢ÊåâÈíÆÊìç‰ΩúÁöÑÂ§ÑÁêÜ„ÄÇ
Version:    V1.0
History:    2013.05.29 ‰øÆÊîπÊåâÈíÆÊåâ‰∏ãÂíåÊùæÂºÄÁöÑÂ§ÑÁêÜ„ÄÇ
		  2013.05.31 Ê∑ªÂä†ÂΩìÊâãÂä®Áä∂ÊÄÅÁª¥Êä§5ÂàÜÈíü‰ª•‰∏äÊó∂Ëá™Âä®ÂàáÊç¢‰∏∫Ëá™Âä®Áä∂ÊÄÅ.„ÄÇ
		  2013.09.10 ‰øÆÊîπÊåâÈíÆÊé•Êî∂Â§ÑÁêÜÊñπÂºèÔºåÁÆÄÂåñ‰ª£Á†Å„ÄÇ
		  2014.10.06 ‰øÆÊîπÊåâÈíÆÊé•ÂèóÂ§ÑÁêÜÊñπÂºèÔºåÁî±‰ΩçÁßªÂæ™ÁéØÂà§Êñ≠‰øÆÊîπ‰ΩçËØªÂèñÈîÆÂÄºËøõË°åÂà§Êñ≠
		  2014.10.23 ∏ƒ‘Ï≥…÷ß≥÷Œﬁœﬂ∞¥º¸ ÷øÿøÿ÷∆
********************************************************************************************/
#include "WirelessButtons.h"
#include "TscMsgQueue.h"
#include "ace/Date_Time.h"
#include "MainBoardLed.h"
#include "TimerManager.h"
#include "GbtMsgQueue.h"
#include "Can.h"
#include "LampBoard.h"
#include "ComFunc.h"

/***************µ±«∞Œﬁœﬂ ÷øÿÀ˘¥¶◊¥Ã¨****************************************/
enum{
	 BUTTON_MANUAL_SELF 		= 0x0,	//◊‘÷˜‘À––
	 BUTTON_MANUAL_MANUAL 		= 0x1,	// ÷∂Ø‘À––	
	 BUTTON_MANUAL_YELLOW_FLASH	= 0x2,	//ª∆…¡
	 BUTTON_MANUAL_ALL_RED		= 0x3,	//»´∫Ï
	 BUTTON_MANUAL_NEXT_STEP	= 0x4,	//œ¬“ª≤Ω
	 BUTTON_MANUAL_NEXT_PHASE	= 0x5,	//œ¬“ªœ‡Œª
	 BUTTON_MANUAL_NEXT_DIREC	= 0x6,	//œ¬“ª∑ΩœÚ
	 BUTTON_SPECIAL_DIREC		= 0x7	//∞¥Ãÿ ‚◊È∫œ÷∏∂®∑ΩœÚ∫Õœ‡Œª≥µµ¿∑Ω–Œ
	
};


/***************µ±«∞∑≈––µ∆◊¥Ã¨****************************************/
enum{

	LAMP_OFF = 0x0 ,         //œ®√
	LAMP_GreenOn = 0x1 ,     //¬Ãµ∆¡¡
	LAMP_GreenFLASH = 0x2 ,  //¬Ã…¡
	LAMP_YELLOW = 0x3 ,      //ª∆µ∆¡¡
	LAMP_YELLOWFLASH = 0x4 , //ª∆…¡
	LAMP_RED = 0x5           //∫Ïµ∆¡¡
};

/**************************************************************
Function:       CWirelessBtn::CWirelessBtn
Description:    CWirelessBtnÁ±ªÊûÑÈÄ†ÂáΩÊï∞ÔºåÁî®‰∫éÁ±ªÂàùÂßãÂåñÂ§ÑÁêÜ				
Input:          Êó†              
Output:         Êó†
Return:         Êó†
***************************************************************/
CWirelessBtn::CWirelessBtn() 
{	
	m_ucLastManualSts = BUTTON_MANUAL_SELF; //≥ı ºªØ¥¶”⁄◊‘∂Ø‘À––◊¥Ã¨	
	m_ucdirectype = 0x0 ; 					//∑ΩœÚ¿‡–Õ 0-±±∑Ω 1- ∂´∑Ω 2- ƒœ∑Ω 3-Œ˜∑Ω	
	bFirstOperate = true ;
	bTransitSetp  = false ;
	RecvoldDirec = 0 ;
	bHandleWirelessBtbMsg = false ;
	pManaKernel = CManaKernel::CreateInstance();
	m_pWirelessBtnTimer = CWirelessBtnTimer::CreateInstance();
	m_tActiveWirelessBtnTimer.timer_queue()->gettimeofday(getCurrTime);
	m_tActiveWirelessBtnTimer.activate();
}

/**************************************************************
Function:       CWirelessBtn::~CWirelessBtn
Description:    CWirelessBtnÁ±ª	ÊûêÊûÑÂáΩÊï∞	
Input:          Êó†              
Output:         Êó†
Return:         Êó†
***************************************************************/
CWirelessBtn::~CWirelessBtn() 
{
	;
}

/**************************************************************
Function:       Manual::CreateInstance
Description:    ÂàõÂª∫	ManualÈùôÊÄÅÂØπË±°
Input:          Êó†              
Output:         Êó†
Return:         ÈùôÊÄÅÂØπË±°ÊåáÈíà
***************************************************************/
CWirelessBtn* CWirelessBtn::CreateInstance()
{
	static CWirelessBtn cWirelessBtn;
	return &cWirelessBtn;
}

/****************************************************************
Function:       CWirelessBtn::EntryWirelessManul
Description:    ÕÀ≥ˆŒﬁœﬂ“£øÿ∞¥º¸£¨ª÷∏¥◊‘÷˜øÿ÷∆
Input:           Œﬁ          
Output:         Œﬁ
Return:         Œﬁ
Date:           20141023
*****************************************************************/

void CWirelessBtn::BackToAuto()
{
	if(m_ucLastManualSts==BUTTON_MANUAL_NEXT_DIREC || m_ucLastManualSts==BUTTON_SPECIAL_DIREC) //Ãÿ ‚∑ΩœÚ◊‘∂Ø∑µªÿµƒ ±∫Ú”–π˝∂…≤Ω
	{		
			bTransitSetp = true ;	
			pManaKernel->SetWirelessBtnDirecCfg(RecvoldDirec,0x2);						
			ACE_OS::sleep(2);
			pManaKernel->SetWirelessBtnDirecCfg(RecvoldDirec,0x1);
			ACE_OS::sleep(3);		
			bTransitSetp = false ;
		
	}	
	else if(m_ucLastManualSts==BUTTON_MANUAL_NEXT_STEP || m_ucLastManualSts==BUTTON_MANUAL_MANUAL) //µ±¥” ÷∂Øœ¬“ª≤ΩÕÀ≥ˆ ‘Úª∆µ∆π˝∂…3√Î
	{
		
		bTransitSetp = true ;
		SetCurrenStepFlash(0x1);		
		ACE_OS::sleep(3);
		bTransitSetp = false ;
	}
	CMainBoardLed::CreateInstance()->DoAutoLed(true);
	CGbtMsgQueue::CreateInstance()->SendTscCommand(OBJECT_SWITCH_SYSTEMCONTROL,0);	
	pManaKernel->SetCycleStepInfo(0); //µ•µ•ππ‘Ï’˚∏ˆ÷‹∆⁄µƒ≤Ω∑•–≈œ¢º¥ø…
	
	CLampBoard::CreateInstance()->SetLamp(pManaKernel->m_pRunData->sStageStepInfo[pManaKernel->m_pRunData->ucStepNo].ucLampOn,pManaKernel->m_pRunData->sStageStepInfo[pManaKernel->m_pRunData->ucStepNo].ucLampFlash); //ÕÀ≥ˆ¿¥µƒ ±∫Ú÷ÿ–¬∏¯µ∆øÿ∞Âµ∆…´–≈œ¢
	bFirstOperate = true ;
	m_ucLastManualSts = BUTTON_MANUAL_SELF;
	pManaKernel->m_pRunData->ucManualType = Manual_CTRL_NO;
	CMainBoardLed::CreateInstance()->SetSignalLed(LED_WIRELESSBUTTON,LED_STATUS_ON);
	
	ACE_DEBUG((LM_DEBUG,"%s:%d Back to Auto-Ctrl from WirelessButtons! \n",__FILE__,__LINE__));
}



/****************************************************************
*
Function:       CWirelessBtn::EntryWirelessManul
Description:    ≥ı¥ŒΩ¯»ÎŒﬁœﬂ∞¥º¸ ÷∂Ø◊¥Ã¨
Input:           Œﬁ          
Output:         Œﬁ
Return:         Œﬁ
Date:           20141023
*****************************************************************/

void CWirelessBtn::EntryWirelessManul()
{
	CMainBoardLed::CreateInstance()->DoAutoLed(false);					
	CGbtMsgQueue::CreateInstance()->SendTscCommand(OBJECT_CURTSC_CTRL,1);
	ACE_DEBUG((LM_DEBUG,"%s:%d First Entry  WirelessBtnManual TscMsg! \n",__FILE__,__LINE__));
	bTransitSetp = true ;
	if(!SetCurrenStepFlash(0x2)) //µ±«∞∑ΩœÚœ‡Œª»Áπ˚ «¬Ãµ∆‘Ú¬Ã…¡
	//»Áπ˚µ±«∞ «∑«¬Ãµ∆◊¥Ã¨£¨¬Ã…¡≤Ÿ◊˜Œﬁ–ß£¨‘ÚΩ¯»Î¬Ã…¡ª∆µ∆Ω¯»Î¬Ã…¡≤Ÿ◊˜≈–∂œ
	{
		SetCurrenStepFlash(0x3); //µ±«∞∑ΩœÚœ‡Œªª∆µ∆‘Úª∆…¡
	}
	bTransitSetp = false ;
	RecvoldDirec = 0 ;	
	m_ucLastManualSts = BUTTON_MANUAL_MANUAL;
	pManaKernel->m_pRunData->ucManualType = Manual_CTRL_WIRELESSBUTTONS;	
	CMainBoardLed::CreateInstance()->SetSignalLed(LED_WIRELESSBUTTON,LED_STATUS_FLASH);

}

/****************************************************************
*
Function:       CWirelessBtn::RecvMacCan
Description:    ∂‘¥”“£øÿ∆˜∑µªÿ÷˜∞Âµƒ∞¥º¸CAN ˝æ›Ω¯––¥¶¿Ì
Input:            Can◊‹œﬂΩ” ’µΩµƒŒﬁœﬂ∞¥º¸ ˝æ›÷°            
Output:         Œﬁ
Return:         Œﬁ
Date:           20141023
*****************************************************************/
void CWirelessBtn::RecvMacCan(SCanFrame sRecvCanTmp)
{
	if(pManaKernel->m_pRunData->ucManualType != Manual_CTRL_NO && pManaKernel->m_pRunData->ucManualType != Manual_CTRL_WIRELESSBUTTONS)
		return ; 
	Byte RecvType = sRecvCanTmp.pCanData[0] & 0x3F ;
	if(RecvType == 0x2 && bTransitSetp == false) //RecvType == 0x2 ±Ì æΩ” ’∞¥º¸–≈œ¢, ÷øÿ∑«π˝∂…≤Ω
	{
		sWirelessBtnCanMsg = sRecvCanTmp ;
		bHandleWirelessBtbMsg = true ;    //Œﬁœﬂ ÷øÿœﬂ≥Ãø…“‘¥¶¿Ì∞¥º¸–≈œ¢
	}
	else
		return ;
}


/**************************************************************
Function:       CWirelessBtn::HandWirelessBtnMsg
Description:    œﬂ≥Ã¥¶¿ÌŒﬁœﬂ ÷øÿ◊È∫œ∑ΩœÚµƒ∑≈––µ∆…´
Input:           Œﬁ             
Output:         Œﬁ
Return:          Œﬁ
Date:            20141117
***************************************************************/
void CWirelessBtn::HandWirelessBtnMsg() //ADD:201411171521
{		
		bHandleWirelessBtbMsg = false ;
		CGbtMsgQueue *pGbtMsgQueue = CGbtMsgQueue::CreateInstance();
		Byte RecvButtonType = sWirelessBtnCanMsg.pCanData[1] ;
		Uint DirecButtonCfg = ((sWirelessBtnCanMsg.pCanData[2]|sWirelessBtnCanMsg.pCanData[3]<<8)|sWirelessBtnCanMsg.pCanData[4]<<16)|sWirelessBtnCanMsg.pCanData[5]<<24;
		Byte iAuto_Manul = RecvButtonType&0x1 ;	
		if(iAuto_Manul == 0x0) //◊‘∂Ø◊¥Ã¨
		{
			if(m_ucLastManualSts == BUTTON_MANUAL_SELF) //»Áπ˚…œ¥Œ◊¥Ã¨“—æ≠ «◊‘÷˜‘À––
				return ;
			else
			{
				//TscBeep();
				BackToAuto();
				CloseWirelessBtn();								
				m_pWirelessBtnTimer->Resettimeout();  //ÕÀ≥ˆ∂® ±∆˜≥¨ ±º∆ ˝÷√Œ™0
			}
		}
		else if(iAuto_Manul == 0x1) // ÷øÿ◊¥Ã¨
		{				
			if(m_ucLastManualSts == BUTTON_MANUAL_SELF) //»Áπ˚…œ¥Œ◊¥Ã¨ «◊‘÷˜‘À––
			{
				//TscBeep();
				EntryWirelessManul();
				StartWirelessBtnTimer();				
			}		
			else
			{									
				CWirelessBtnTimer::CreateInstance()->Resettimeout();  //”–‘⁄Ω¯––Œﬁœﬂ ÷øÿ≤Ÿ◊˜‘Ú£¨≥¨ ±º∆ ˝÷√Œ™0
				if((RecvButtonType>>1)&0x1)  //Ω¯»Îª∆…¡øÿ÷∆
				{
					if(m_ucLastManualSts == BUTTON_MANUAL_YELLOW_FLASH)
					{
						return ;
					}
					else
					{
						//TscBeep();
						pGbtMsgQueue->SendTscCommand(OBJECT_SWITCH_SYSTEMCONTROL,254);						
						pManaKernel->SndMsgLog(LOG_TYPE_MANUAL,2,0,0,0); //ADD:20141031
						ACE_DEBUG((LM_DEBUG,"%s:%d Send WirelessBtn FLASH! TscMsg!\n",__FILE__,__LINE__));
						m_ucLastManualSts = BUTTON_MANUAL_YELLOW_FLASH;
						pManaKernel->m_pRunData->flashType = CTRLBOARD_FLASH_MANUALCTRL;
						bFirstOperate = true ;
					}
				}
				else if((RecvButtonType>>2)&0x1)//Ω¯»Î»´∫Ïøÿ÷∆
				{
					if (m_ucLastManualSts == BUTTON_MANUAL_ALL_RED)
					{
						return ;
					}
					else
					{
						//TscBeep();
						pGbtMsgQueue->SendTscCommand(OBJECT_SWITCH_SYSTEMCONTROL,253);
						pManaKernel->SndMsgLog(LOG_TYPE_MANUAL,4,0,0,0); //ADD:20141031
						ACE_DEBUG((LM_DEBUG,"%s:%d Send WirelessBtn  ALLRED TscMsg!\n",__FILE__,__LINE__));
						m_ucLastManualSts = BUTTON_MANUAL_ALL_RED;
						bFirstOperate = true ;
					}
				}
				else if((RecvButtonType>>3)&0x1)//µ„ª˜œ¬“ª≤Ω∞¥º¸
				{
					if(m_ucLastManualSts == BUTTON_MANUAL_MANUAL || m_ucLastManualSts == BUTTON_MANUAL_NEXT_STEP)  //œ¬“ª≤Ω÷ªƒ‹”… ÷øÿ∫Û÷±Ω”Ω¯»Î£¨∆‰À˚≤Ÿ◊˜∫ÛŒﬁ∑®÷±Ω”Ω¯»Î
					{
						//TscBeep();
						pGbtMsgQueue->SendTscCommand(OBJECT_GOSTEP,0);
						ACE_DEBUG((LM_DEBUG,"%s:%d Send WirelessBtn Next Step TscMsg ! \n",__FILE__,__LINE__));
						pManaKernel->SndMsgLog(LOG_TYPE_MANUAL,6,0,0,0);
						m_ucLastManualSts = BUTTON_MANUAL_NEXT_STEP;
						bFirstOperate = true ;						
					}
				}
				else if((RecvButtonType>>4)&0x1) //œ¬“ªœ‡Œª
				{
					if(m_ucLastManualSts == BUTTON_MANUAL_MANUAL || m_ucLastManualSts == BUTTON_MANUAL_NEXT_PHASE)  //œ¬“ª≤Ω÷ªƒ‹”… ÷øÿ∫Û÷±Ω”Ω¯»Î£¨∆‰À˚≤Ÿ◊˜∫ÛŒﬁ∑®÷±Ω”Ω¯»Î
					{
						//TscBeep();
						pGbtMsgQueue->SendTscCommand(OBJECT_SWITCH_STAGE,0);
						ACE_DEBUG((LM_DEBUG,"%s:%d Send WirelessBtn Next Phase TscMsg !\n",__FILE__,__LINE__));
						if(m_ucLastManualSts != BUTTON_MANUAL_NEXT_PHASE)
						m_ucLastManualSts = BUTTON_MANUAL_NEXT_PHASE;	
						bFirstOperate = true ;						
					}
				}
				else if((RecvButtonType>>5)&0x1)//œ¬“ª∑ΩœÚ
				{
					//TscBeep();
					if(m_ucLastManualSts == BUTTON_MANUAL_MANUAL && m_ucAllowLampStatus == LAMP_GreenFLASH) 
					{
						
						SetCurrenStepFlash(0x1); //»Áπ˚ ÷∂ØΩ¯»Î «¬Ã…¡‘Úª∆µ∆π˝∂…
						ACE_OS::sleep(3);
					}
					else if(m_ucLastManualSts == BUTTON_MANUAL_NEXT_STEP)
					{
						
						bTransitSetp = true ;	
						SetCurrenStepFlash(0x2); //µ±«∞∑ΩœÚœ‡Œª¬Ã…¡À	
						ACE_OS::sleep(2);	
						SetCurrenStepFlash(0x1); //µ±«∞∑ΩœÚœ‡Œªª∆µ∆
						bTransitSetp = false ;
					}
					SThreadMsg sTscMsg ;
					sTscMsg.ulType       = TSC_MSG_MANUALBUTTON_HANDLE; 
					sTscMsg.ucMsgOpt     = 0;
					sTscMsg.uiMsgDataLen = 0;			
					sTscMsg.pDataBuf     = ACE_OS::malloc(4);
					ACE_OS::memset((Byte*)sTscMsg.pDataBuf,0x0,4);
					((Byte*)sTscMsg.pDataBuf)[(m_ucdirectype++)%4] = 0x7 ;
					CTscMsgQueue::CreateInstance()->SendMessage(&sTscMsg,sizeof(sTscMsg));	
					ACE_DEBUG((LM_DEBUG,"%s:%d Send Next WirelessBtn DIRE=%d !\n",__FILE__,__LINE__,m_ucdirectype-1));
					if(m_ucLastManualSts != BUTTON_MANUAL_NEXT_DIREC)
						m_ucLastManualSts = BUTTON_MANUAL_NEXT_DIREC;
					pManaKernel->m_pRunData->uiWorkStatus = STANDARD ;					
				}
				else if(DirecButtonCfg != 0x0)
				{
					//TscBeep();
					if(m_ucLastManualSts == BUTTON_MANUAL_MANUAL && m_ucAllowLampStatus == LAMP_GreenFLASH) 
					{
						SetCurrenStepFlash(0x1); //»Áπ˚ ÷∂ØΩ¯»Î «¬Ã…¡‘Úª∆µ∆π˝∂…
						ACE_OS::sleep(3);
					}
					else if(m_ucLastManualSts == BUTTON_MANUAL_NEXT_STEP)
					{
						bTransitSetp = true ;	
						SetCurrenStepFlash(0x2); //µ±«∞∑ΩœÚœ‡Œª¬Ã…¡À	
						ACE_OS::sleep(2);	
						SetCurrenStepFlash(0x1); //µ±«∞∑ΩœÚœ‡Œªª∆µ∆
						bTransitSetp = false ;
					}
					SThreadMsg sTscMsg ;
					sTscMsg.ulType       = TSC_MSG_MANUALBUTTON_HANDLE; 
					sTscMsg.ucMsgOpt     = 0;
					sTscMsg.uiMsgDataLen = 4;			
					sTscMsg.pDataBuf     = ACE_OS::malloc(4);
					ACE_OS::memcpy((Byte*)sTscMsg.pDataBuf,&DirecButtonCfg,4);
					CTscMsgQueue::CreateInstance()->SendMessage(&sTscMsg,sizeof(sTscMsg));
					if(m_ucLastManualSts != BUTTON_SPECIAL_DIREC)
						m_ucLastManualSts = BUTTON_SPECIAL_DIREC;
					pManaKernel->m_pRunData->uiWorkStatus = STANDARD ; //±‹√‚Œﬁ∑®‘Ÿ¥ŒΩ¯»Îª∆…¡ªÚ»´∫Ï					
				}		
			}
		}
	
	
}

/**************************************************************
Function:       CWirelessBtn::GetbHandleWirelessBtnMsg
Description:    ¥¶¿ÌŒﬁœﬂ ÷øÿ◊È∫œ∑ΩœÚµƒ∑≈––µ∆…´
Input:           RecvDircData  -∑≈––∑ΩœÚ ˝æ›             
Output:         Œﬁ
Return:         bool÷µ,true-–Ëœﬂ≥Ã¥¶¿ÌŒﬁœﬂ ÷øÿ∞¥º¸ false-Œﬁ–Ë¥¶¿Ì
Date:            20141117
***************************************************************/
bool CWirelessBtn::GetbHandleWirelessBtnMsg()
{
	return bHandleWirelessBtbMsg ;
}

/**************************************************************
Function:       CWirelessBtn::HandleSpecialDirec
Description:    ¥¶¿ÌŒﬁœﬂ ÷øÿ◊È∫œ∑ΩœÚµƒ∑≈––µ∆…´
Input:           RecvDircData  -∑≈––∑ΩœÚ ˝æ›             
Output:         Œﬁ
Return:         Œﬁ
Date:            20141105
***************************************************************/
void CWirelessBtn::HandleSpecialDirec(Uint * RecvtmpDircData)
{
	Uint RecvDircData = *RecvtmpDircData ;	
	if(bTransitSetp == false)  //∑«π˝∂…≤Ω
	{	
		if(bFirstOperate)
		{
			pManaKernel->SetWirelessBtnDirecCfg(RecvDircData,0x0);
			bFirstOperate = false ;
			RecvoldDirec = RecvDircData ;
			//ACE_OS::printf("%s:%d First special direc ,no Transit setp !\n",__FILE__,__LINE__);
		}
		else
		{
			bTransitSetp = true ;	
			pManaKernel->SetWirelessBtnDirecCfg(RecvoldDirec,0x2);
						
			//ACE_OS::printf("%s:%d Transit setp Green Flash sleep 2 sec!\n",__FILE__,__LINE__);
			ACE_OS::sleep(2);
			pManaKernel->SetWirelessBtnDirecCfg(RecvoldDirec,0x1);
						
			//ACE_OS::printf("%s:%d Transit setp Yellow  sleep 3 sec!\n",__FILE__,__LINE__);
			ACE_OS::sleep(3);
			pManaKernel->SetWirelessBtnDirecCfg(RecvDircData,0x0);
			bTransitSetp  = false ;
			RecvoldDirec = RecvDircData ;
		}			
	
	}

}

/**************************************************************
Function:       CWirelessBtn::SetCurrenStepFlash
Description:    …Ë÷√µ±«∞≤Ω∑•¥¶”⁄∫Œ÷÷µ∆…´◊¥Ã¨£¨”√”⁄Ω¯»Î ÷øÿµƒ ±∫Úπ˝∂…
Input:           LampColor--µ∆…´◊¥Ã¨           
Output:         Œﬁ
Return:         Œﬁ
Date:            20141105
***************************************************************/

bool  CWirelessBtn::SetCurrenStepFlash(Byte LampColor)
{
	//ACE_OS::printf("%s:%d First WirelessManual Flash!\n",__FILE__,__LINE__);
	bool bSetLampColor = false ;
	Byte LampColorStatus = 0 ;
	Byte m_ucLampOn[MAX_LAMP]={0}; 
	Byte m_ucLampFlash[MAX_LAMP]={0}; 
	ACE_OS::memcpy(m_ucLampOn,pManaKernel->m_pRunData->sStageStepInfo[pManaKernel->m_pRunData->ucStepNo].ucLampOn,MAX_LAMP);	
	ACE_OS::memcpy(m_ucLampFlash,pManaKernel->m_pRunData->sStageStepInfo[pManaKernel->m_pRunData->ucStepNo].ucLampFlash,MAX_LAMP);
	
	for(Byte LampIndex = 0 ;LampIndex< 60 ; LampIndex++)
	{
		LampColorStatus  = pManaKernel->m_pRunData->sStageStepInfo[pManaKernel->m_pRunData->ucStepNo].ucLampOn[LampIndex];
		if(LampColorStatus ==1)
		{
			 if(LampIndex%3 ==2)
			{
				if(LampColor ==0x2)//¬Ã…¡
					{
						m_ucLampFlash[LampIndex]=0x1;
						if(!bSetLampColor)
							bSetLampColor = true ;
						m_ucAllowLampStatus = LAMP_GreenFLASH;
					}
				if(LampColor == 0x1)//ª∆µ∆
				{		
					m_ucLampOn[LampIndex]=0;
					m_ucLampFlash[LampIndex]=0;
					
					if((LampIndex+1)%12==0) //»À––
					{
						m_ucLampOn[LampIndex-2] = 0x1 ;
						
					}
					else
					{
						m_ucLampOn[LampIndex-1]=0x1;
						
					}
					if(!bSetLampColor)
							bSetLampColor = true ;
					m_ucAllowLampStatus = LAMP_YELLOW ;
				}
				if(LampColor == 0x3)//ª∆…¡
				{	
					if(m_ucLampFlash[LampIndex]==0x1)
					{
						m_ucLampOn[LampIndex]=0x0;
						m_ucLampFlash[LampIndex]=0x0;
						if((LampIndex+1)%12==0) //»À––≤ªª∆µ∆∫Õ…¡À∏
						{
							
							m_ucLampOn[LampIndex-2] = 0x1 ; 	 //»À––¡¡∫Ïµ∆						
						}
						else
						{
							m_ucLampOn[LampIndex-1]=0x1;    //ª∆µ∆…¡
							m_ucLampFlash[LampIndex-1]=0x1;
						}
						
						if(!bSetLampColor)
							bSetLampColor = true ;
						m_ucAllowLampStatus = LAMP_YELLOWFLASH ;
					}
				}
			
			}
			if(LampIndex%3 ==1)
			{
				if(LampColor == 0x3)//ª∆…¡
				{
						if((LampIndex+2)%12==0) //»À––≤ªª∆µ∆∫Õ…¡À∏
						{
							m_ucLampOn[LampIndex]=0x0;
							m_ucLampFlash[LampIndex]=0x0;
							m_ucLampOn[LampIndex-1] =0x1;
						}
						else
							m_ucLampFlash[LampIndex]=0x1;
					if(!bSetLampColor)
							bSetLampColor = true ;
					m_ucAllowLampStatus = LAMP_YELLOWFLASH;
				}

			}
		}
	}
	
	if(bSetLampColor)
		CLampBoard::CreateInstance()->SetLamp(m_ucLampOn,m_ucLampFlash);
}


/**************************************************************
Function:		CWirelessBtn::StartWirelessBtnTimer
Description:	ø™∆ÙŒﬁœﬂ“£øÿ∆˜≥¨ ±∂® ±∆˜,∆µ¬ 1√Î
Input:		Œﬁ 			
Output: 		Œﬁ
Return: 		Œﬁ
Date:		 20141118
***************************************************************/

void CWirelessBtn::StartWirelessBtnTimer()
{
	m_lWirelessBtnTimerId = m_tActiveWirelessBtnTimer.schedule(m_pWirelessBtnTimer,NULL,getCurrTime(),ACE_Time_Value(1)); 
}

/**************************************************************
Function:		CWirelessBtn::CloseWirelessBtn
Description:	πÿ±’Œﬁœﬂ“£øÿ∆˜≥¨ ±∂® ±∆˜
Input:			 Œﬁ 			
Output: 		Œﬁ
Return: 		Œﬁ
Date:	     20141118
***************************************************************/
void CWirelessBtn::CloseWirelessBtn()
{
	if ( m_lWirelessBtnTimerId > 0 )
	{
		m_tActiveWirelessBtnTimer.cancel(m_lWirelessBtnTimerId);
	}
}


/**************************************************************
Function:       CWirelessBtnTimer::CWirelessBtnTimer
Description:    CWirelessBtnTimer¿‡ππ‘Ï∫Ø ˝
Input:           Œﬁ             
Output:         Œﬁ
Return:         Œﬁ
Date:            20141023
***************************************************************/
CWirelessBtnTimer::CWirelessBtnTimer()
{
	m_uctimeout = 0 ;
	//bAutoExit = false ;
	m_ucSystemSetTimeOut = CManaKernel::CreateInstance()->m_pTscConfig->sSpecFun[FUN_WIRELESSBTN_TIMEOUT].ucValue*60 ;
	ACE_DEBUG((LM_DEBUG,"%s:%d Init WirelessBtnTimer object ok !\n",__FILE__,__LINE__));

}

/**************************************************************
Function:       CWirelessBtnTimer::~CWirelessBtnTimer
Description:    CTscTimer¿‡Œˆππ∫Ø ˝
Input:          Œﬁ               
Output:         Œﬁ
Return:         Œﬁ
Date:            20141023
***************************************************************/
CWirelessBtnTimer::~CWirelessBtnTimer()
{
	ACE_DEBUG((LM_DEBUG,"%s:%d Destruct CWirelessBtnTimer object ok !\n",__FILE__,__LINE__));
}

/**************************************************************
Function:       CWirelessBtnTimer::CreateInstance
Description:    ¥¥Ω®µ•¿˝∂‘œÛ
Input:          Œﬁ          
Output:       Œﬁ
Return:       CWirelessBtnTimer∂‘œÛ÷∏’Î
***************************************************************/

CWirelessBtnTimer* CWirelessBtnTimer::CreateInstance()
{
	static CWirelessBtnTimer cWirelessBtnTimer;
	return &cWirelessBtnTimer;
}


/**************************************************************
Function:       CWirelessBtnTimer::handle_timeout
Description:    –≈∫≈ª˙“£øÿ∆˜∞¥≈•∂® ±∆˜∂® ±ªÿµ˜∫Ø ˝£¨1s÷¥––“ª¥Œ°£¥¶¿Ì–≈∫≈ª˙
				∂‡ ˝∂® ±π§◊˜°£
Input:           ƒ¨»œ¥¶¿Ì£¨”√ªßŒﬁ–Ë ‰»Î              
Output:         Œﬁ
Return:         0
Date:            20141023
***************************************************************/
int CWirelessBtnTimer::handle_timeout(const ACE_Time_Value &tCurrentTime, const void * /* = 0 */)
{
	m_uctimeout++;	
	if(m_uctimeout >=  m_ucSystemSetTimeOut )
	{			
		CWirelessBtn::CreateInstance()->BackToAuto();
		CWirelessBtn::CreateInstance()->CloseWirelessBtn();		
		m_uctimeout = 0 ;
		ACE_OS::printf("%s:%d WirelessBtn Manual Control timeout ,Back to AutoSelf Control!\r\n",__FILE__,__LINE__);
		
	}
	return 0 ;
}

/**************************************************************
Function:       CWirelessBtnTimer::Resettimeout
Description:    ÷ÿ÷√≥¨ ±º∆ ˝

Input:           Œﬁ           
Output:         Œﬁ
Return:         Œﬁ
Date:            20141023
***************************************************************/

void CWirelessBtnTimer::Resettimeout()
{
	m_uctimeout = 0 ;
}


